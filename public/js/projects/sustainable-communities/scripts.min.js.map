{"version":3,"names":[],"mappings":"","sources":["scripts.js"],"sourcesContent":["/* globals Chart, scrollama, moment */\n\nfunction ready(fn) {\n    if (document.readyState !== 'loading'){\n        fn();\n    } else {\n        document.addEventListener('DOMContentLoaded', fn);\n    }\n}\n\nready(function(){\n    const datasets = [\n        {\n            description: 'Global car sales by year in millions',\n            labels:[2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019],\n            data:[59.82538999,62.11692753,65.35975731,62.11447225,60.39993278,69.10737696,72.21276899,74.6365189,77.78073407,80.74368694,84.60678349,89.11974173,91.2071613,91.23289985,86.892329]\n        },\n        {\n            description: '600% increase in veganism in the US',\n            labels:[2014,2017],\n            data:[1,6]\n        },\n        {\n            description: 'Top 100 companies responsible for 70% of polution',\n            labels:['Top 100 companies', 'The rest'],\n            data:[70.57,29.43]\n        },\n        {\n            description: 'The US military emits more CO2 than many nations',\n            labels:['U.S Military', 'Morocco', 'Peru', 'Sweden', 'Hungary', 'Finland', 'New Zealand', 'Norway', 'Switzerland'],\n            data:[59.0,58.5,50.9,48.0,47.7,45.0,37.0,35.3,34.4]\n        }\n    ];\n\n    const config = [\n        {\n            type: 'line',\n            data: {\n                labels: datasets[0].labels,\n                datasets: [{\n                    label: 'Car sales',\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    borderColor: 'rgb(255, 99, 132)',\n                    data: datasets[0].data,\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        suggestedMin: 0,\n                        suggestedMax: Math.max(datasets[0].data),\n                        ticks: {\n                            callback: function(value, index, values){\n                                return `${ value } mill`;\n                            }\n                        }\n                    }\n                },\n                plugins: {\n                    tooltip: {\n                        callbacks: {\n                            label: function(context){\n                                let label = 'Cars sold: ';\n\n                                if (context.parsed.y !== null) {\n                                    label += new Intl.NumberFormat('en-US', {}).format(context.parsed.y);\n                                }\n                                return label + \" mill\";\n                            }\n                       }\n                    }\n                }\n            }\n        },\n        {\n            type: 'line',\n            data: {\n                labels: datasets[1].labels,\n                datasets: [{\n                    label: 'Self-reported vegans in the US',\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    borderColor: 'rgb(255, 99, 132)',\n                    data: datasets[1].data,\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        suggestedMin: 0,\n                        suggestedMax: Math.max(datasets[0].data),\n                        ticks: {\n                            callback: function(value, index, values){\n                                return `${ value }%`;\n                            }\n                        }\n                    }\n                },\n                plugins: {\n                    tooltip: {\n                        callbacks: {\n                            label: function(context){\n                                let label = context.dataset.label || '';\n                                if (label) {\n                                  label += ': ';\n                              }\n                              if (context.parsed.y !== null) {\n                                  label += new Intl.NumberFormat('en-US', {}).format(context.parsed.y);\n                              }\n                              return label + '%';\n                            }\n                       }\n                    }\n                }\n            }\n        },\n        {\n            type: 'pie',\n            data: {\n                labels: datasets[2].labels,\n                datasets: [{\n                    label: 'Companies sharing responsibility for polution',\n                    backgroundColor: [\n                      'rgb(255, 99, 132)',\n                      'rgb(54, 162, 235)',\n                      'rgb(255, 205, 86)'\n                    ],\n                    borderColor: 'rgb(255, 99, 132)',\n                    data: datasets[2].data,\n                }]\n            },\n            options: {\n                plugins: {\n                    legend: {\n                        reverse: true,\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context){\n                                let label = context.label += ' are responsible for ';\n                                if (context.parsed !== null) {\n                                    label += new Intl.NumberFormat('en-US', {}).format(context.parsed);\n                                }\n                                return label + '% of polution';\n                            }\n                       }\n                    }                    \n                }                \n            }\n        },\n        {\n          type: 'bar',\n            data: {\n                labels: datasets[3].labels,\n                datasets: [{\n                    label: 'CO2 emissions',\n                    backgroundColor: datasets[3].data.map((d, i) => i === 0 ? 'rgb(255, 99, 132)' : Chart.defaults.backgroundColor),\n                    borderColor: [\n                      'rgb(255, 99, 132)',\n                      'rgb(255, 159, 64)',\n                      'rgb(255, 205, 86)',\n                      'rgb(75, 192, 192)',\n                      'rgb(54, 162, 235)',\n                      'rgb(153, 102, 255)',\n                      'rgb(201, 203, 207)'\n                    ],                    \n                    // backgroundColor: [\n                    //   'rgb(255, 99, 132)',\n                    //   'rgb(54, 162, 235)',\n                    //   'rgb(255, 205, 86)'\n                    // ],\n                    borderColor: 'rgb(255, 99, 132)',\n                    data: datasets[3].data,\n                }]\n            },\n          options: {\n            scales: {\n              y: {\n                beginAtZero: true\n              }\n            },\n            plugins: {\n                tooltip: {\n                    callbacks: {\n                        label: function(context){\n                            let label = context.dataset.label || '';\n                            if (label) {\n                              label += ': ';\n                          }\n                          if (context.parsed.y !== null) {\n                              label += new Intl.NumberFormat('en-US', {}).format(context.parsed.y);\n                          }\n                          return label + ' mill. tons';\n                        }\n                   }\n                }\n            }            \n          }\n        }        \n    ];\n\n    // Chart.defaults.color = \"#172c66\";\n    // Chart.defaults.borderColor = \"#8bd3dd\";\n    // Chart.defaults.backgroundColor = \"rgb(255, 99, 132)\";\n\n    let chart, chartWrapperEl = document.getElementById('chart-wrapper'), chartEl = document.getElementById('chart');\n\n    const description = document.getElementById('description');\n    const scroller = scrollama();\n\n    scroller\n        .setup({\n            step: '.step',\n        })\n        .onStepEnter(function(response){\n            /* response = { direction, element, index }, */\n            // console.log('onStepEnter', response); \n            // console.log('onStepEnter', response.index, response.direction);\n\n            if (chart && chart.destroy){\n                chart.destroy();\n            }\n\n            if (response.index !== 'skip' && datasets[response.index]){\n                chartWrapperEl.classList.remove('opacity-0');\n                \n                chart = new Chart(\n                    chartEl,\n                    config[response.index]\n               );                    \n\n                description.innerHTML = datasets[response.index].description;\n\n                window.helpers.highlightMax(chart);\n\n            } else {\n                chartWrapperEl.classList.add('opacity-0');\n            }\n            if (config[response.index]){\n                chartWrapperEl.dataset.chartType = config[response.index].type;\n            }\n        })\n        .onStepExit(function(response){\n            /* response = { direction, element, index }, */\n            // console.log('onStepExit', response);\n            // console.log('onStepExit', response.index, response.direction);\n        }\n   );\n\n    window.addEventListener('resize', scroller.resize);\n});\n"],"file":"scripts.min.js"}