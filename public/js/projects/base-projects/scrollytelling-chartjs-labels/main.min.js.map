{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["/* globals Chart, scrollama, moment */\nimport ready from '/js/modules/ready.min.js';\nimport getMonth from '/js/modules/getMonth.min.js';\nimport highlightMax from '/js/modules/highlightMax.min.js';\nimport preloadImages from '/js/modules/preloadImages.min.js';\n\nready(function(){\n    let showAll = false;\n\n    const dataset = [\n        {\n            language: 'Python',\n            salary: 100742\n        },\n        {\n            language: 'JavaScript',\n            salary: 97039\n        },\n        {\n            language: 'Java',\n            salary: 101192\n        },\n        {\n            language: 'Swift',\n            salary: 101589\n        },\n        {\n            language: 'C',\n            salary: 94264\n        },\n        {\n            language: 'C++',\n            salary: 100500\n        },\n        {\n            language: 'Ruby',\n            salary: 104988\n        },\n        {\n            language: 'Go',\n            salary: 112092\n        },\n        {\n            language: 'Objective-C',\n            salary: 101285\n        },\n        {\n            language: 'Perl',\n            salary: 98199\n        },\n        {\n            language: 'CSS',\n            salary: 94113\n        },\n        {\n            language: 'Visual Basic',\n            salary: 78271\n        }\n    ].sort((a, b) => (a.salary > b.salary) ? 1 : -1);\n\n    const dataLabels = dataset.map(function(datapoint){\n        return datapoint.language;\n    });\n\n    const dataValues = dataset.map(function(datapoint){\n        return datapoint.salary;\n    });\n\n\n    const logos = [\n        {\n            src: `${ window.location.pathname }/images/logos/go.png`,\n            width: 20,\n            height: 20\n        },\n        {\n            src: `${ window.location.pathname }/images/logos/ruby.png`,\n            width: 20,\n            height: 20\n        },\n        {\n            src: `${ window.location.pathname }/images/logos/swift.png`,\n            width: 20,\n            height: 20\n        },\n        {\n            src: `${ window.location.pathname }/images/logos/objective-c.png`,\n            width: 20,\n            height: 20\n        },\n        {\n            src: `${ window.location.pathname }/images/logos/java.png`,\n            width: 20,\n            height: 20\n        },\n        {\n            src: `${ window.location.pathname }/images/logos/python.png`,\n            width: 20,\n            height: 20\n        },\n        {\n            src: `${ window.location.pathname }/images/logos/c++.png`,\n            width: 20,\n            height: 20\n        },\n        {\n            src: `${ window.location.pathname }/images/logos/perl.png`,\n            width: 20,\n            height: 20\n        },\n        {\n            src: `${ window.location.pathname }/images/logos/javascript.png`,\n            width: 20,\n            height: 20\n        },\n        {\n            src: `${ window.location.pathname }/images/logos/c.png`,\n            width: 20,\n            height: 20\n        },\n        {\n            src: `${ window.location.pathname }/images/logos/css.png`,\n            width: 20,\n            height: 20\n        },\n        {\n            src: `${ window.location.pathname }/images/logos/visual-basic.png`,\n            width: 20,\n            height: 20\n        }\n    ];\n\n    Chart.defaults.color = \"#172c66\";\n    Chart.defaults.borderColor = \"#8bd3dd\";\n    Chart.defaults.backgroundColor = \"#fef6e4\";\n\n    const data = {\n        labels: [],\n        datasets: [{\n            label: 'Median salary',\n            borderWidth: 1,\n            data: []\n        }]\n    };\n\n    const annotation = {\n        type: 'line',\n        scaleID: 'y',\n        value: 72560,\n        borderColor: Chart.defaults.borderColor,\n        borderWidth: 2,\n        borderDash: [5, 5],\n        // label: {\n        //     backgroundColor: 'rgba(0,0,0,0.3)',\n        //     color: Chart.defaults.backgroundColor,\n        //     content: '$78k',\n        //     enabled: false\n        // },\n        click: function({chart, element}) {\n            console.log('Line annotation clicked');\n        }\n    };    \n\n    const config = {\n        type: 'bar',\n        data: data,\n        options: {\n            scales: {\n                x: {\n                    display: false,\n                },\n                y: {\n                    display: false,\n                    suggestedMin: 50000,\n                    startAtZero: false,\n                    suggestedMax: Math.max(dataValues),\n                    ticks: {\n                        callback: function(value, index, values){\n                            return `${new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(value)}`;\n                        }\n                    }\n                }\n            },\n            plugins: {\n                legend: {\n                    display: false\n                },\n                title: {\n                    display: true,\n                    text: 'Average developer salary by programming language'\n                },                \n                subtitle: {\n                    display: true,\n                    text: 'Average developer salary: $78,271',\n                    padding: {\n                        bottom: 30\n                    }                    \n                },                \n                tooltip: {\n                    callbacks: {\n                        label: function(context){\n                            let label = context.dataset.label || '';\n                            if (label) {\n                              label += ': ';\n                          }\n                          if (context.parsed.y !== null) {\n                              label += `${new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(context.parsed.y)}`;\n                          }\n                          return label;\n                      }\n                  }\n                },\n                datalabels: {\n                    anchor: 'end',\n                    align  : 'start'        \n                },\n                labels: {\n                    render: 'image',\n                    textMargin: -40,\n                    images: logos.reverse()\n                },\n                // annotation: {\n                //     annotations: {\n                //         annotation\n                //     }\n                // }                \n            }            \n        },\n        plugins: {\n            tooltip: {\n                callbacks: {\n                    title: function(tooltipItems) {\n                        const title = tooltipItems[0].label;\n                        const year = title.split('/')[0];\n                        const month = getMonth(parseInt(title.split('/')[1]) - 1);\n                        return `${month} ${year}`;\n                    },\n                    label: function(context){\n                        let label = context.dataset.label || '';\n                        if (label) {\n                          label += ': ';\n                      }\n                      if (context.parsed.y !== null) {\n                          label += `$${new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(context.parsed.y)}`;\n                      }\n                      return label;\n                  }\n              }\n            }        \n        }        \n    };\n\n    const chart = new Chart(document.getElementById('chart'), config);\n\n    const description = document.getElementById('description');\n    const menuIcon = document.getElementById('menu-icon');\n    const scroller = scrollama();\n\n    scroller\n        .setup({\n            step: '.step',\n        })\n        .onStepEnter(function(response){\n            /* response = { direction, element, index }, */\n            // console.log('onStepEnter', response); \n            // console.log('onStepEnter', response.index, response.direction);\n\n            // if (response.index === 0){\n            //     description.innerHTML = '';\n            // }\n\n            chart.options.scales.x.display = true;\n            chart.options.scales.y.display = true;\n\n            if (!showAll){\n                // annotation.label.enabled = response.index > 0;\n\n                chart.options.plugins.annotation = {\n                    annotations: {\n                        annotation\n                    }\n                };\n\n                chart.data.datasets[0].data = dataValues.slice(0, response.index + 1);\n                chart.data.labels = dataLabels.slice(0, response.index + 1);\n                // chart.data.labels[response.index] = dataLabels[response.index];\n\n                description.innerHTML = '';\n                chart.update();\n                highlightMax(chart);\n            }\n\n            if (response.index === dataset.length - 1){\n                showAll = true;\n            }\n        })\n        .onStepExit(function(response){\n            /* response = { direction, element, index }, */\n            // console.log('onStepExit', response);\n            // console.log('onStepExit', response.index, response.direction);\n\n            if (menuIcon && ((response.direction === 'up' && response.index === 0) || (response.direction === 'down' && response.index === datasets.length - 1))){\n                menuIcon.classList.remove('d-none');\n            }\n        }\n   );\n\n    window.addEventListener('resize', scroller.resize);\n    \n    preloadImages(logos.map(function(logo){\n        return logo.src;\n    }));\n\n});\n"],"file":"main.min.js"}