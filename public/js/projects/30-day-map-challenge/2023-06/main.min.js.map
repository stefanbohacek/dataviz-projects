{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["/* globals Chart, scrollama, moment */\n\nimport ready from '/js/modules/ready.min.js';\nimport {addMarkers} from '/js/modules/mapboxHelper.min.js';\n\nready(async () => {\n    const resp = await fetch('/data/nyc-pizza-slices/nyc-pizza-slices.json');\n    let dataset = await resp.json();\n    dataset = dataset.map(d => {\n      return {\n        \"name\": d.name,\n        \"x\": d.lat,\n        \"y\": d.lng\n      }\n    });\n\n    const data = {\n        datasets: [{\n            label: 'Price of a slice vs restaurant rating',\n            backgroundColor: 'rgb(255, 99, 132)',\n            borderColor: 'rgb(255, 99, 132)',\n            data: dataset\n        }]\n    };\n\n    [...document.getElementsByClassName('step-next')].forEach(btn => {\n        btn.addEventListener('click', ev => {\n            ev.preventDefault();\n            const stepID = ev.target.getAttribute('href');\n            document.getElementById(stepID.replace('#', '')).scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"nearest\" });\n        })\n    })\n\n    const menuIcon = document.getElementById('menu-icon');\n    const scroller = scrollama();\n\n    const locations = [];\n    \n    [...document.getElementsByClassName('step')].forEach(step => {\n        const lng = parseFloat(step.dataset.lng);\n        const lat = parseFloat(step.dataset.lat);\n\n        const marker = new mapboxgl.Marker({ \"color\": \"#232946\" })\n                                   .setLngLat([lng, lat]);\n        locations.push([lng, lat]);\n    });\n\n\n\n    mapboxgl.accessToken =\n    \"pk.eyJ1IjoiZm91cnRvbmZpc2giLCJhIjoiY2xvZ2g5MjkxMHR0dzJybzFjeWl1dWwxbCJ9.LrPluFJuIzcHp5Ts7HZb9Q\";\n\n    const map = new mapboxgl.Map({\n        container: \"map\",\n        // style: \"mapbox://styles/mapbox/light-v11\",\n        style: \"mapbox://styles/mapbox/dark-v11\",\n        // style: \"mapbox://styles/mapbox/streets-v12\",\n        // style: \"mapbox://styles/mapbox/satellite-v9\",\n        center: [40.712776, -74.005974],\n        zoom: 1,\n    });\n\n    map.on(\"load\", () => {\n        map.addSource(\"asia\", {\n        type: \"geojson\",\n        data: \"/data/continents/asia.geojson\",\n        // data: \"/data/continents/non-asia.geojson\",\n        });\n\n        map.addLayer({\n        id: \"asia-layer\",\n        type: \"fill\",\n        source: \"asia\",\n        paint: {\n            \"fill-color\": \"#fff\",\n            \"fill-opacity\": 0.15\n        },\n        });\n\n        map.flyTo({\n        center: [78.962883, 20.593683],\n        zoom: 3,\n        duration: 2000\n        });    \n    });\n\n\n    const firstStep = document.getElementById('step-0');\n\n    const lng = parseFloat(firstStep.dataset.lng);\n    const lat = parseFloat(firstStep.dataset.lat);\n\n    const options = {\n        center: [lng, lat],\n        essential: false\n    };\n\n    map.flyTo(options);\n\n\n    let markers = [];\n\n    scroller\n        .setup({\n            step: '.step',\n        })\n        .onStepEnter((response) => {\n            /* response = { direction, element, index }, */\n            // console.log('onStepEnter', response); \n            // console.log('onStepEnter', response.index, response.direction);\n\n            [...document.getElementsByClassName('active-step')].forEach(el => el.classList.remove('active-step'));\n            response.element.classList.add('active-step');\n\n            const lng = parseFloat(response.element.dataset.lng);\n            const lat = parseFloat(response.element.dataset.lat);\n\n            const options = {\n                center: [lng, lat],\n                duration: 2400,\n                essential: false\n            };\n\n            map.flyTo(options);\n            \n            markers = addMarkers(map, locations, markers, '#666', '#ddd', response.index);\n\n            if (menuIcon && ((response.direction === 'down' && response.index >= 0) || (response.direction === 'up' && response.index <= datasets.length - 1))){\n                menuIcon.classList.add('d-none');\n                menuIcon.classList.add('d-md-block');\n            }\n        })\n        .onStepExit((response) => {\n            /* response = { direction, element, index }, */\n            // console.log('onStepExit', response);\n            // console.log('onStepExit', response.index, response.direction);\n\n            if (menuIcon && ((response.direction === 'up' && response.index === 0) || (response.direction === 'down' && response.index === datasets.length - 1))){\n                menuIcon.classList.remove('d-none');\n            }\n        }\n   );\n\n    window.addEventListener('resize', scroller.resize);\n});\n"],"file":"main.min.js"}