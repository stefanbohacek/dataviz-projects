{"version":3,"names":[],"mappings":"","sources":["modules/startGame.js"],"sourcesContent":["import randomFromArray from \"/js/modules/randomFromArray.min.js\";\nimport initAwesomplete from \"/js/modules/initAwesomplete.min.js\";\n\nconst loadingScreen = document.getElementById(\"loading\");\nconst profileImage = document.getElementsByClassName(\"profile-image\");\nconst accountNameEl = document.getElementById(\"account-name\");\nconst gameInterface = document.getElementById(\"viz-user\");\nconst answerForm = document.getElementById(\"answer-form\");\nconst currentAnswerEl = document.getElementById(\"current-answer\");\nconst roundCounterEl = document.getElementById(\"round-counter\");\nconst followBio = document.getElementById(\"follow-bio\");\nconst pointsTotalEl = document.getElementById(\"points-total\");\nconst resultsSection = document.getElementById(\"results-section\");\nconst resultsTable = document.getElementById(\"results-table\");\nconst restartGameBtns = document.getElementsByClassName(\"restart-game\");\n\nlet fullUserData;\nlet follows;\nlet resumeGame = false;\nconst gameStateInit = {\n  currentRound: 1,\n  currentRoundAccountIndex: 0,\n  points: 0,\n  rounds: [],\n};\n\nlet gameState = gameStateInit;\n\nconst savedGameState = localStorage.getItem(\"fediverseFollowsGameState\");\n\nif (savedGameState) {\n  try {\n    gameState = JSON.parse(savedGameState);\n    resumeGame = true;\n  } catch (err) {\n    /* noop */\n  }\n}\n\nconst playRound = (follows) => {\n  if (gameState.currentRound > 10) {\n    answerForm.classList.add(\"d-none\");\n    resultsSection.classList.remove(\"d-none\");\n    showResults();\n    return;\n  }\n\n  currentAnswerEl.value = null;\n  roundCounterEl.innerText = gameState.currentRound;\n\n  if (!resumeGame) {\n    const usedAnswers = gameState.rounds\n      .slice(1)\n      .map((round) => round?.accountIndex);\n\n    const availableIndices = follows\n      .map((_, index) => index)\n      .filter((index) => !usedAnswers.includes(index));\n\n    gameState.currentRoundAccountIndex = randomFromArray(availableIndices);\n\n    gameState.rounds[gameState.currentRound] = {\n      accountIndex: gameState.currentRoundAccountIndex,\n    };\n  } else {\n    gameState.currentRoundAccountIndex =\n      gameState.rounds[gameState.currentRound]?.accountIndex;\n  }\n\n  const randomAccount = follows[gameState.currentRoundAccountIndex];\n  followBio.innerHTML = randomAccount.note;\n\n  localStorage.setItem(\"fediverseFollowsGameState\", JSON.stringify(gameState));\n  resumeGame = false;\n};\n\nconst checkAnswer = () => {\n  const userAnswer = currentAnswerEl.value.trim();\n  const currentAnswer = `${\n    follows[gameState.currentRoundAccountIndex].username\n  } (${follows[gameState.currentRoundAccountIndex].acct})`;\n\n  gameState.rounds[gameState.currentRound].userAnswer = userAnswer;\n\n  const roundResult = currentAnswer === userAnswer;\n  if (roundResult) {\n    gameState.points++;\n  }\n\n  gameState.currentRound++;\n\n  localStorage.setItem(\"fediverseFollowsGameState\", JSON.stringify(gameState));\n  playRound(follows);\n};\n\nconst showResults = () => {\n  let resultsHtml = /* html */ `\n    <thead>\n      <tr>\n        <th>Account</th>\n        <th>Your answer</th>\n        <th>Result</th>\n      </tr>\n    </thead>\n    <tbody>\n  `;\n\n  gameState.rounds.forEach((round, index) => {\n    if (gameState.rounds[index]?.userAnswer) {\n      const userAnswer = gameState.rounds[index].userAnswer;\n\n      const correctAnswer = `${\n        fullUserData.follows[round.accountIndex].username\n      } (${fullUserData.follows[round.accountIndex].acct})`;\n\n      const roundResult = correctAnswer === userAnswer;\n\n      resultsHtml += /* html */ `\n      <tr>\n        <td data-label=\"Account\" class=\"text-start\">\n          <div class=\"d-flex text-start\">\n            <div class=\"flex-shrink-0\">\n              <img width=\"32\" height=\"32\" src=\"${\n                fullUserData.follows[round.accountIndex].avatar\n              }\" alt=\"\">\n            </div>\n            <div class=\"flex-grow-1 ms-0 ms-md-3\">\n            <strong>${\n              fullUserData.follows[round.accountIndex].username\n            }</strong><br/>\n              ${fullUserData.follows[round.accountIndex].note}\n            </div>\n          </div>\n        </td>\n        <td data-label=\"Your answer\" class=\"text-start\">${round.userAnswer}</td>\n        <td data-label=\"Result\" class=\"text-start\">${\n          roundResult ? `✅ Correct!` : `❌ Incorrect`\n        }</td>\n      </tr>\n    `;\n    }\n  });\n\n  resultsHtml += `</tbody>`;\n  resultsTable.innerHTML = resultsHtml;\n  pointsTotalEl.innerText = gameState.points;\n};\n\nanswerForm.addEventListener(\"submit\", (ev) => {\n  ev.preventDefault();\n  checkAnswer();\n});\n\n[...restartGameBtns].forEach((restartGameBtn) => {\n  restartGameBtn.addEventListener(\"click\", (ev) => {\n    ev.preventDefault();\n    localStorage.removeItem(\"fediverseFollowsData\");\n    window.location.reload();\n  });\n});\n\nexport default async (userData) => {\n  fullUserData = userData;\n  follows = userData.follows;\n\n  loadingScreen.classList.add(\"d-none\");\n  gameInterface.classList.remove(\"d-none\");\n  gameInterface.scrollIntoView({\n    behavior: \"smooth\",\n  });\n\n  accountNameEl.innerHTML = userData.name;\n\n  if (userData.profileImageURL) {\n    profileImage[1].src = userData.profileImageURL;\n  }\n\n  setTimeout(() => {\n    initAwesomplete(\"#current-answer\", {\n      list: follows.map((account) => `${account.username} (${account.acct})`),\n      minChars: 0,\n    });\n  }, 1000);\n  playRound(follows);\n};\n"],"file":"startGame.min.js"}