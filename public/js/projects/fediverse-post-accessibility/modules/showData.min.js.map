{"version":3,"names":[],"mappings":"","sources":["modules/showData.js"],"sourcesContent":["import drawChart from \"./drawChart.min.js\";\nimport sortArrayOfObjects from \"/js/modules/sortArrayOfObjects.min.js\";\nimport { isMobile } from \"/js/modules/browserHelpers.min.js\";\nimport { jsonToCSV, downloadCSV } from \"/js/modules/csvHelper.min.js\";\n\nconst dataDownloadPrompt = document.getElementById(\"download-data\");\nconst loadingScreen = document.getElementById(\"loading\");\n\nconst profileImage = document.getElementsByClassName(\"profile-image\");\nconst accountNameEl = document.getElementById(\"account-name\");\nconst thankYouEl = document.getElementById(\"thank-you\");\nconst userVisualization = document.getElementById(\"viz-user\");\n\nconst showData = async (userData) => {\n  loadingScreen.classList.add(\"d-none\");\n  userVisualization.classList.remove(\"d-none\");\n  userVisualization.scrollIntoView({\n    behavior: \"smooth\",\n  });\n\n  // setTimeout(() => {\n  //   loadingScreen.classList.add(\"d-none\");\n  // }, 2000);\n\n  accountNameEl.innerHTML = userData.name;\n\n  if (userData.profileImageURL) {\n    profileImage[1].src = userData.profileImageURL;\n  }\n\n  // connectionsBreakdownEl.innerHTML = `\n  //     <li>\n  //         You follow <strong>${userData.followingCount}</strong> accounts across <strong>${userData.followingInstancesCount}</strong> servers\n  //     </li>\n  //     <li>\n  //         You have <strong>${userData.followersCount}</strong> followers across <strong>${userData.followersInstancesCount}</strong> servers\n  //     </li>\n\n  //     <li>\n  //         You have <strong>${userData.connectionsCount} connections</strong> across <strong>${userData.totalDomainsCount} servers</strong> in total\n  //     </li>\n  // `;\n  // topDomainsCountEl.innerHTML = userData.topDomainsCount;\n  // topServersListEl.innerHTML = userData.topDomains\n  //   .map(\n  //     (domain) =>\n  //       `<li><code>${domain.domain}</code>: <strong>${domain.connections}</strong> connections (${domain.percentage}%)</li>`\n  //   )\n  //   .join(\"\");\n  // domainsUniqueConnectionsEl.innerHTML = `Out of the ${userData.totalDomainsCount} servers you are connected to, <strong>${userData.uniqueDomainsCount}</strong> of them have <strong>only one connection</strong> on it.`;\n\n  let hashtags = [];\n\n  for (let hashtag in userData.hashtags) {\n    hashtags.push({\n      hashtag: hashtag,\n      count: userData.hashtags[hashtag],\n    });\n  }\n\n  hashtags = sortArrayOfObjects(hashtags, \"count\", true);\n  // userData.hashtags = hashtags;\n  userData.hashtags = hashtags.slice(0, isMobile() ? 50 : 250);\n  // drawChart(userData);\n\n  // dataDownloadPrompt.innerHTML = `\n  //     <button class=\"small d-inline d-md-block mt-md-3\" id=\"download-data-btn\">Download the full data</button>\n  // `;\n\n  // const csv = jsonToCSV(hashtags);\n\n  // document\n  //   .getElementById(\"download-data-btn\")\n  //   .addEventListener(\"click\", (ev) => {\n  //     ev.preventDefault();\n  //     downloadCSV(csv, \"fediverse-hashtags.csv\");\n  //   });\n\n  let visualMediaDescribedNote = \"\";\n\n  if (userData.stats.visualMediaDescribed === userData.stats.visualMediaTotal) {\n    visualMediaDescribedNote = \"Fantastic!\";\n  } else {\n    const percentageOfDescribedVisualMedia = Math.round(\n      (userData.stats.visualMediaDescribed / userData.stats.visualMediaTotal) *\n        100\n    );\n\n    visualMediaDescribedNote += `That's about ${percentageOfDescribedVisualMedia}%.`;\n\n    if (percentageOfDescribedVisualMedia > 90) {\n      visualMediaDescribedNote += \" You're doing a great job!\";\n    } else if (percentageOfDescribedVisualMedia > 75) {\n      thankYouEl.classList.remove(\"d-none\");\n      visualMediaDescribedNote += \" Great effort, but you can do better!\";\n    } else {\n      visualMediaDescribedNote += \" You can surely do better!\";\n    }\n  }\n\n  let mediaNeedsFixingHTML = \"\";\n\n  if (userData.stats.statusesNeedFixing && userData.stats.statusesNeedFixing.length) {\n    mediaNeedsFixingHTML = /* html */ `\n      <p>Here are some of the images that are missing description.</p>\n      <div class=\"row mt-5 mb-5\">`;\n\n    userData.stats.statusesNeedFixing.forEach((status) => {\n      status.mediaNeedsFixing.forEach((media) => {\n        mediaNeedsFixingHTML += /* html */ `\n          <div class=\"col-sm-6 col-md-4 col-lg-3\">\n            <a href=\"${status.url}\" target=\"_blank\">\n              <img class=\"w-10\" src=\"${media}\" alt=\"An image with no description.\">\n            </a>\n          </div>\n          `;\n      });\n    });\n    mediaNeedsFixingHTML += /* html */ `</div>`;\n  }\n\n  const resultsEl = document.getElementById(\"results\");\n  resultsEl.innerHTML = /*html*/ `\n    <p>\n      Out of your <strong>${userData.stats.postsTotal.toLocaleString()} posts with visual media attached</strong>, <strong>${\n    userData.stats.visualMediaDescribed\n  } have alt text</strong>. ${visualMediaDescribedNote}\n    </p>\n    ${mediaNeedsFixingHTML}\n    `;\n\n  // const resultsTableWrapper = document.getElementById(\"results-table\");\n  // resultsTableWrapper.innerHTML = `\n  // <table class=\"table table-hover mt-5\">\n  //   <thead>\n  //     <tr>\n  //       <th scope=\"col\">Hashtag</th>\n  //       <th scope=\"col\">Count</th>\n  //     </tr>\n  //   </thead>\n  //   <tbody>\n  //   ${\n  //     hashtags.map(hashtag => `\n  //       <tr>\n  //         <td>${hashtag.hashtag}</td>\n  //         <td>${hashtag.count.toLocaleString()}</td>\n  //       </tr>\n  //     `).join(\"\")\n  //   }\n  // </table>\n  // `;\n};\n\nexport default showData;\n"],"file":"showData.min.js"}