{"version":3,"names":[],"mappings":"","sources":["modules/loadData.js"],"sourcesContent":["// global modules\n\nimport getServerPlatform from '/js/modules/getServerPlatform.min.js';\nimport getUrlParams from '/js/modules/getUrlParams.min.js';\nimport sortArrayOfObjects from '/js/modules/sortArrayOfObjects.min.js';\nimport saveData from '/js/modules/saveData.min.js';\n\n// local modules\n\nimport fetchData from './fetchData.min.js';\nimport showData from './showData.min.js';\n\nconst greeting = document.getElementsByClassName('greeting');\nconst loadingScreen = document.getElementById('loading');\nconst profileImage = document.getElementsByClassName('profile-image');\n\nconst loadData = async () => {\n  let userData = {};\n  const {token, instance, username, userid, avatarUrl} = getUrlParams(true);\n\n  if (token && instance){\n      const platform = await getServerPlatform(instance);\n      let userInfo = {}, profileImageURL;\n\n      switch (platform) {\n          case 'mastodon':\n          case 'hometown':\n          case 'friendica':\n          case 'pleroma':\n          case 'akkoma':\n              userInfo = await fetchData(instance, platform, 'accounts/verify_credentials', token);\n              profileImageURL = userInfo.avatar_static || userInfo.avatar;\n      \n              if (userInfo.display_name){\n                  userData.name = userInfo.display_name || 'there'\n              }\n              \n              if (userInfo.acct){\n                  userData.account = `@${userInfo.acct}@${instance}`;\n      \n                  if (!userData.name){\n                      userData.name = `@${userInfo.acct}`;\n                  }\n              }\n      \n              if (!userData.name){\n                  userData.name = 'there';\n              }\n              \n              if (profileImageURL){\n                  userData.profileImageURL = profileImageURL;\n              }\n      \n              break;\n          case 'misskey':\n          case 'calckey':\n          case 'foundkey':\n          case 'magnetar':\n              userInfo.id = userid;\n              userData.name = username;\n              userData.account = `@${username}@${instance}`;\n              userData.profileImageURL = avatarUrl;\n\n              break;\n          default:\n              break;\n      }\n\n      loadingScreen.classList.remove('d-none');\n      greeting[0].innerHTML = `Hello ${userData.name}!`            \n          \n      if (userData.profileImageURL){\n          profileImage[0].src = userData.profileImageURL;\n      }\n          \n      loading.scrollIntoView({\n          behavior: 'smooth'\n      });\n\n      let followers, following, accountIDs, connections;\n      let followersInstances = {}, followingInstances = {}, connectionInstances = {};\n\n      switch (platform) {\n          case 'mastodon':\n          case 'hometown':\n          case 'friendica':\n          case 'pleroma':\n          case 'akkoma':\n              followers = await fetchData(instance, platform, `accounts/${userInfo.id}/followers?limit=100`, token);\n              following = await fetchData(instance, platform, `accounts/${userInfo.id}/following?limit=100 `, token);\n      \n              break;\n          case 'misskey':\n          case 'calckey':\n          case 'foundkey':\n          case 'magnetar':\n              followers = await fetchData(instance, platform, `users/followers`, token, userInfo.id);\n              following = await fetchData(instance, platform, `users/following `, token, userInfo.id);\n              followers = followers.map(f => f.follower)\n              following = following.map(f => f.followee)                    \n              break;\n          default:\n              break;\n      }\n\n      if (followers && followers.length){\n          if (!followers[0].acct){\n              followers.forEach(follower => {\n                  follower.acct = `${follower.username}@${follower.host || instance}`;\n              });\n          }\n      }\n\n      if (following && following.length){\n          if (!following[0].acct){\n              following.forEach(account => {\n                  account.acct = `${account.username}@${account.host || instance}`;\n              });\n          }\n      }\n\n      accountIDs = new Set(followers.map(follower => follower.acct ));\n      connections = [...followers, ...following.filter(account => !accountIDs.has(account.acct))];\n  \n      followers.forEach(account => {\n          // console.log(account, account.acct.split('@'));\n          let domain;\n          \n          if (account.acct.includes('@')){\n              domain = account.acct.split('@')[1];\n          } else{\n              domain = instance;\n          };\n\n          if (followersInstances[domain]){\n              followersInstances[domain]++;\n          } else {\n              followersInstances[domain] = 1;\n          }\n      });\n      \n      following.forEach(account => {\n          let domain;\n\n          if (account.acct.includes('@')){\n              domain = account.acct.split('@')[1];\n          } else{\n              domain = instance;\n          };\n\n          if (followingInstances[domain]){\n              followingInstances[domain]++;\n          } else {\n              followingInstances[domain] = 1;\n          }\n      });\n      \n      connections.forEach(account => {\n          let domain;\n\n          if (account.acct.includes('@')){\n              domain = account.acct.split('@')[1];\n          } else{\n              domain = instance;\n          };\n\n          if (connectionInstances[domain]){\n              connectionInstances[domain]++;\n          } else {\n              connectionInstances[domain] = 1;\n          }\n      });\n      \n      let connectionInstancesObjectArray = [];\n      let uniqueDomainsCount = 0;\n      let totalDomainsCount = 0;\n  \n      for (let domain in connectionInstances){\n          totalDomainsCount++;\n\n          connectionInstancesObjectArray.push({\n              domain,\n              connections: connectionInstances[domain],\n              percentage: ((connectionInstances[domain]/connections.length)*100).toFixed(1).toLocaleString()\n          });\n  \n          if (connectionInstances[domain] === 1){\n              uniqueDomainsCount++;\n          }\n      }\n      \n      connectionInstancesObjectArray = sortArrayOfObjects(connectionInstancesObjectArray, 'connections', true);\n      const topDomains = connectionInstancesObjectArray.slice(0, 10);\n  \n      userData.connectionsCount = connections.length.toLocaleString();\n      userData.followersCount = followers.length.toLocaleString();\n      userData.followingCount = following.length.toLocaleString();\n      userData.followersInstancesCount = Object.keys(followersInstances).length.toLocaleString();\n      userData.followingInstancesCount = Object.keys(followingInstances).length.toLocaleString();\n      userData.totalDomainsCount = totalDomainsCount.toLocaleString();\n      userData.topDomainsCount = topDomains.length.toLocaleString();\n      userData.topDomains = topDomains;\n      userData.allDomains = connectionInstancesObjectArray;\n      userData.uniqueDomainsCount = uniqueDomainsCount.toLocaleString();\n\n      saveData('fediverseUserData', userData, 60);\n      showData(userData);\n  }\n}\n\nexport default loadData;\n"],"file":"loadData.min.js"}