{"version":3,"names":[],"mappings":"","sources":["modules/drawChart.js"],"sourcesContent":["import {backgroundColorFromData} from '/js/modules/chartHelper.min.js';\n\nconst menuIcon = document.getElementById('menu-icon');\n\nconst drawChart = (userData) => {\n  let highlightedValues = [];\n  const labels = userData.allDomains.map((domain) => domain.domain);\n  const datasets = [userData.allDomains.map((domain) => domain.connections)];\n\n  // Chart.defaults.color = \"#172c66\";\n  // Chart.defaults.borderColor = \"#8bd3dd\";\n  // Chart.defaults.backgroundColor = \"rgb(255, 99, 132)\";\n\n  const data = {\n    labels: labels[0],\n    datasets: [\n      {\n        label: \"Servers\",\n        backgroundColor: (context) => backgroundColorFromData(context, highlightedValues),\n        borderColor: \"rgb(255, 99, 132)\",\n        data: datasets[0],\n      },\n    ],\n  };\n\n  const chart = new Chart(document.getElementById(\"chart\"), {\n    type: \"treemap\",\n    data,\n    options: {\n      scales: {\n        y: {\n          suggestedMin: 0,\n          // suggestedMax: Math.max(...[].concat(...datasets)),\n          ticks: {\n            callback: function (value, index, values) {\n              return `${value}`;\n            },\n          },\n        },\n      },\n      onClick: function (ev, data) {\n        const domain = userData.allDomains[data[0].index];\n        window.open(`https://${domain.domain}/`, \"_blank\");\n      },\n      plugins: {\n        tooltip: {\n          callbacks: {\n            title: function (tooltipItems) {\n              return labels[tooltipItems[0].dataIndex];\n            },\n            label: function (context) {\n              return `${datasets[0][context.dataIndex]} connection${\n                datasets[0][context.dataIndex] === 1 ? \"\" : \"s\"\n              }`;\n            },\n          },\n        },\n      },\n    },\n  });\n\n  const scroller = scrollama();\n\n  scroller\n    .setup({\n      step: \".step\",\n    })\n    .onStepEnter(function (response) {\n      /* response = { direction, element, index }, */\n      // console.log('onStepEnter', response);\n      // console.log('onStepEnter', response.index, response.direction);\n\n      if (\n        menuIcon &&\n        ((response.direction === \"down\" && response.index >= 0) ||\n          (response.direction === \"up\" &&\n            response.index <= datasets.length - 1))\n      ) {\n        menuIcon.classList.add(\"d-none\");\n        menuIcon.classList.add(\"d-md-block\");\n      }\n\n      for (let i = 0; i < chart.data.datasets[0].data.length; i++) {\n        switch (response.index) {\n          case 1:\n            highlightedValues = userData.topDomains.map(\n              (domain) => domain.connections\n            );\n            break;\n          case 2:\n            highlightedValues = [1];\n            break;\n          default:\n            highlightedValues = userData.allDomains.map(\n              (domain) => domain.connections\n            );\n            break;\n        }\n      }\n      chart.update();\n    })\n    .onStepExit(function (response) {\n      /* response = { direction, element, index }, */\n      // console.log('onStepExit', response);\n      // console.log('onStepExit', response.index, response.direction);\n\n      if (\n        menuIcon &&\n        ((response.direction === \"up\" && response.index === 0) ||\n          (response.direction === \"down\" &&\n            response.index === datasets.length - 1))\n      ) {\n        menuIcon.classList.remove(\"d-none\");\n      }\n    });\n\n  window.addEventListener(\"resize\", scroller.resize);\n};\n\nexport default drawChart;\n"],"file":"drawChart.min.js"}