{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["/* globals Chart, scrollama, moment */\n\nimport ready from '/js/modules/ready.min.js';\n\nready(async () => {\n    const resp = await fetch('/data/overshoot-days/overshoot-days.json');\n    const overshootDays = await resp.json();\n\n    const Utils = {\n        isoDayOfWeek: (dt) => {\n          let wd = dt.getDay(); // 0..6, from sunday\n          wd = (wd + 6) % 7 + 1; // 1..7 from monday\n          return '' + wd; // string so it gets parsed\n        },\n        startOfToday: () => {\n          const d = new Date();\n          return new Date(d.getFullYear(), d.getMonth(), d.getDate(), 0, 0, 0, 0);\n        }\n    };\n\n    let datasets = [];\n    let years = Object.keys(overshootDays);\n\n    for (let year = parseInt(years[0]); year <= parseInt(years[years.length - 1]); year++){\n      let a = moment(`${year}-01-01`);\n      let b = moment(`${year}-12-31`);\n      let dataset = [];\n\n      let overshootDayPassed = false;\n\n      for (let m = moment(a); m.diff(b, 'days') <= 0; m.add(1, 'days')){\n        let date = m.format('YYYY-MM-DD');\n        if (!overshootDayPassed && date === `${ year }-${ overshootDays[year].overshoot_day }`){\n            overshootDayPassed = true;\n\n        }\n\n        let dt = new Date(date);\n\n        dataset.push({\n            x: date,\n            y: Utils.isoDayOfWeek(dt),\n            overshoot_day_passed: overshootDayPassed,\n            date: date,\n            days_lasted: overshootDays[year].days_lasted,\n            percent_lasted:  Math.round(overshootDays[year].percent_lasted),\n            days_left: overshootDays[year].days_left\n        });\n      }\n\n      datasets.push(dataset);\n    }\n\n    const dataDescriptions = document.getElementById('data-descriptions');\n\n    let html = '';\n\n    datasets.forEach((datapoint, index) => {\n        let notes = '';\n        let dataYear = datapoint[0].date.split('-')[0];\n\n        switch (dataYear){\n            case '2020':\n                notes = ' <a href=\"https://earthobservatory.nasa.gov/images/148477/covid-19-lockdowns-cut-pollution-but-not-all-of-it\" target=\"_blank\" rel=\"noopener\">Due to COVID-19</a>, the Overshoot Day was pushed further into the year.';\n        }\n\n        let isHighlighted = index === 0 ? 'bg-dark' : '';\n\n        html += `\n          <div class=\"step --min-vh-100 p-3 ${ isHighlighted }\" data-step=\"${ index }\">\n            <h2>${dataYear} <span class=\"percent-lasted text-white\">${ datapoint[0].percent_lasted }%</span></h2>\n            <p>In ${dataYear} the Overshoot Day was on <strong>${ moment(`${dataYear}-${overshootDays[dataYear].overshoot_day}`).format('MMMM DD') }</strong>, which means our planet lasted us <span class=\"days-lasted\">${ datapoint[0].days_lasted } days</span> with <span class=\"days-left\">${ datapoint[0].days_left } days</span> left in the year.${ notes }</p>\n          </div>\n        `;\n    });\n\n    dataDescriptions.innerHTML = html;\n\n    Chart.defaults.color = \"#000\";\n    // Chart.defaults.borderColor = \"#8bd3dd\";\n    // Chart.defaults.backgroundColor = \"rgb(255, 99, 132)\";\n\n    // console.log(datasets[0]);\n\n    const colors = {\n        // red: '#BF625A',\n        // green: '#84D98A'\n        red: '#D98B79',\n        green: '#abd1c6'        \n    };\n\n    const data = {\n        datasets: [{\n            label: 'My Matrix',\n            data: datasets[0],\n            backgroundColor(c) {\n                // const value = c.dataset.data[c.dataIndex].v;\n                // const alpha = (10 + value) / 60;\n                // return Chart.helpers.color('green').alpha(alpha).rgbString();\n\n                return c.dataset.data[c.dataIndex].overshoot_day_passed ? colors.red : colors.green;\n            },\n            borderColor(c) {\n                // const value = c.dataset.data[c.dataIndex].v;\n                // const alpha = (10 + value) / 60;\n                // return Chart.helpers.color('green').alpha(alpha).darken(0.3).rgbString();\n                return c.dataset.data[c.dataIndex].overshoot_day_passed ? colors.red : colors.green;\n            },\n            borderWidth: 1,\n            hoverBackgroundColor: 'yellow',\n            hoverBorderColor: 'yellowgreen',\n            width(c) {\n                const a = c.chart.chartArea || {};\n                return (a.right - a.left) / 60 - 1;\n            },\n            height(c) {\n                const a = c.chart.chartArea || {};\n                return (a.bottom - a.top) / 10 - 1;\n            }\n        }]\n    };\n\n    const scales = {\n        y: {\n            type: 'time',\n            offset: true,\n            time: {\n                unit: 'day',\n                round: 'day',\n                isoWeekday: 1,\n                parser: 'd',\n                // displayFormats: {\n                //     // day: 'YYYY-MM-DD'\n                // }\n            },\n            reverse: true,\n            position: 'right',\n            ticks: {\n                display: false,\n                maxRotation: 0,\n                autoSkip: true,\n                padding: 1,\n                // font: {\n                //     size: 0\n                // }\n            },\n            grid: {\n                display: false,\n                drawBorder: false,\n                tickLength: 0\n            }\n        },\n        x: {\n            type: 'time',\n            position: 'bottom',\n            offset: true,\n            time: {\n                unit: 'week',\n                round: 'week',\n                isoWeekday: 1,\n                displayFormats: {\n                    week: 'MMMM'\n                }\n            },\n            ticks: {\n                maxRotation: 0,\n                autoSkip: true,\n                // padding: 20,\n                font: {\n                    color: '#fff',\n                    size: 12\n                }\n            },\n            grid: {\n                display: false,\n                drawBorder: false,\n                tickLength: 0,\n            }\n        }\n    };\n\n    const options = {\n        animation: false,\n        aspectRatio: 5,\n        plugins: {\n            legend: false,\n            tooltip: {\n                displayColors: false,\n                callbacks: {\n                    title() {\n                        return '';\n                    },\n                    label(context) {\n                        const v = context.dataset.data[context.dataIndex];\n                        return moment(v.date).format('MMMM DD YYYY');\n                    }\n                }\n            },\n        },\n        scales: scales,\n        layout: {\n            padding: {\n                top: 10\n            }\n        }\n    };\n    const chart = new Chart(document.getElementById('chart'), {\n        type: 'matrix',\n        data: data,\n        options: options\n    });\n\n    document.querySelector('.col-sm-12.col-md-12.bg-white.p-0').classList.add('sticky-top');\n    \n    const description = document.getElementById('description');\n    const menuIcon = document.getElementById('menu-icon');\n    const scroller = scrollama();\n\n    scroller\n        .setup({\n            step: '.step',\n        })\n        .onStepEnter((response) => {\n            /* response = { direction, element, index }, */\n            // console.log('onStepEnter', response); \n            // console.log('onStepEnter', response.index, response.direction);\n\n            let highlighted = document.querySelectorAll('.bg-dark.step');\n\n            if (highlighted){\n                for (let i = 0, j = highlighted.length; i < j; i++){\n                    highlighted[i].classList.remove('bg-dark');\n                }\n            }\n\n            document.querySelector(`[data-step=\"${ response.index }\"]`).classList.add('bg-dark');\n\n            if (menuIcon && ((response.direction === 'down' && response.index >= 0) || (response.direction === 'up' && response.index <= datasets.length - 1))){\n                menuIcon.classList.add('d-none');\n                menuIcon.classList.add('d-md-block');\n            }          \n\n            chart.data.datasets[0].data = datasets[response.index];\n            chart.update();\n\n            // description.innerHTML = datasets[response.index][datasets[response.index].length-1].d;\n            description.innerHTML = '';\n        })\n        .onStepExit((response) => {\n            /* response = { direction, element, index }, */\n            // console.log('onStepExit', response);\n            // console.log('onStepExit', response.index, response.direction);\n\n            if (menuIcon && ((response.direction === 'up' && response.index === 0) || (response.direction === 'down' && response.index === datasets.length - 1))){\n                menuIcon.classList.remove('d-none');\n            }\n        }\n   );\n\n    window.addEventListener('resize', scroller.resize);\n});\n"],"file":"main.min.js"}